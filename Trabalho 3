import random

# Itens: (valor, peso)
items = [(60, 10), (100, 20), (120, 30)]
capacity = 50
population_size = 10
generations = 50
mutation_rate = 0.1

# Criação de um indivíduo aleatório
def create_individual():
    return [random.randint(0, 1) for _ in range(len(items))]

# Avaliação da aptidão
def fitness(individual):
    total_value, total_weight = 0, 0
    for gene, (value, weight) in zip(individual, items):
        if gene:
            total_value += value
            total_weight += weight
    if total_weight > capacity:
        return 0  # Soluções inválidas recebem penalização
    return total_value

# Seleção por torneio
def selection(population):
    return max(random.sample(population, 2), key=fitness)

# Cruzamento (crossover) de dois pais
def crossover(parent1, parent2):
    point = random.randint(1, len(parent1) - 1)
    return parent1[:point] + parent2[point:]

# Mutação
def mutate(individual):
    for i in range(len(individual)):
        if random.random() < mutation_rate:
            individual[i] = 1 - individual[i]

# Execução do algoritmo
population = [create_individual() for _ in range(population_size)]

for generation in range(generations):
    new_population = []
    for _ in range(population_size):
        parent1 = selection(population)
        parent2 = selection(population)
        offspring = crossover(parent1, parent2)
        mutate(offspring)
        new_population.append(offspring)
    population = new_population

# Melhor solução encontrada
best = max(population, key=fitness)
print("Melhor solução:", best)
print("Valor total:", fitness(best))
